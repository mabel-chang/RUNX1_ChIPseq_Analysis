CONDITIONS = ['INP', 'RUNX1']
REPS =['rep1','rep2']

rule all:
	input:
		expand("results/{condition}_{rep}_sorted.bam.bai", condition=CONDITIONS, rep=REPS),
		"results/multiqc_report.html",
		"results/correlation_matrix.png"
        
rule bowtie2_align:
	input:
		fastq="results/{condition}_{rep}_trimmed.fastq.gz"
	output:
		"results/{condition}_{rep}.bam"
	params:
	    index = "results/full_gen_ind"
	threads: 16
	conda:
		"envs/bowtie2_env.yml"
	shell:
		"""
		bowtie2 -x {params.index} -U {input.fastq} | samtools view -bS - > {output}
		"""

rule samtools_sort:
	input:
		"results/{condition}_{rep}.bam"
	output:
		"results/{condition}_{rep}_sorted.bam"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools sort -o {output} {input}
		"""

rule samtools_idx:
	input:
		"results/{condition}_{rep}_sorted.bam"
	output:
		"results/{condition}_{rep}_sorted.bam.bai"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools index {input}
		"""

rule samtools_flagstat:
	input:
		"results/{condition}_{rep}.bam"
	output:
		"results/{condition}_{rep}_flagstat.txt"
	conda:
		'envs/samtools_env.yml'
	shell:
		"""
		samtools flagstat {input} > {output}
		"""

rule multiqc:
	input:
		expand('results/{condition}_{rep}_flagstat.txt', condition=CONDITIONS, rep=REPS)
	output:
		"results/multiqc_report.html"
	params:
		outdir = 'results/full_data/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		"""
		multiqc -f {params.outdir} -o {params.outdir}
		"""

rule bamCoverage:
	input:
		"results/{condition}_{rep}_sorted.bam.bai"
	output:
		"results/{condition}_{rep}.bw"
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		"""
		bamCoverage -b {input} -o {output}
		"""

rule multiBwSummary:
    input:
        expand("results/{condition}_{rep}.bw", condition=CONDITIONS, rep=REPS)
    output:
        "results/correlation_matrix.npz"
    conda:
        "envs/deeptools_env.yml"
    shell:
        """
        multiBigwigSummary bins -b {input} -o {output}
        """
        
rule plotCorrelation:
	input:
		"results/correlation_matrix.npz"
	output:
		"results/correlation_matrix.png"
	conda:
		'envs/deeptools_env.yml'
	shell:
		"""
		plotCorrelation -in {input} --corMethod pearson --skipZeros --plotTitle "Pearson Correlation of Samples" --whatToPlot heatmap --colorMap RdYlBu --plotNumbers -o {output}
		"""
